//============================================================================================
//============================================================================================
//********************************************************************************************
// this SOP file is introduce the initial and necessary tools if you first get the 
// TK1 board, then follow the SOP step by step will complete setting before program
// code or any work.
// the necessary tools include "CUDA, opencv2.4.12, Caffe, TensorRT, Eigen, MySQL"
// copyright @ XYZrobot inc. 2017
//*********************************************************************************************
//=============================================================================================
//=============================================================================================

_______________________________________________________________________________________________

/**Ubuntu 16.04 Server**/

### Boot Override
### Choose [UEFI: USB DISK]

### Detect keyboard layout?
### <No>

### Unmount partitions that are in use?
### <No>

### Partitioning method:
### <Manual>

### 500MB EPS
### 500MB /boot ext4
### 100GB /     ext4
### 130GB /home ext4
### 68GB        swap

### Choose software to install:
### <standard server>

### xubuntu-desktop install
$ sudo apt-get install xfce4
$ sudo apt-get install xubuntu-desktop
$ 








_______________________________________________________________________________________________

/**Ubuntu 16.04**/

### Foce UEFI Installation -> [back]

### 修復 GRUB（PATA=hda、SATA/SCSI/SAS=sda）
$ sudo update-grub
$ sudo grub-install /dev/sda

### 修復 出現 "grub rescue>" (進不了Linux桌面時)
### https://www.openfoundry.org/tw/foss-programs/9267-linux-grub2-fixing

grub rescue > set boot=(hd0,6)
grub rescue > set prefix=(hd0,6)/grub
grub rescue > insmod normal
grub rescue > normal

### login usb-ubuntu system

$ sudo fdisk -l
$ sudo mount /dev/sda6 /mnt
$ sudo grub-install --root-directory=/mnt /dev/sda
# reboot and change boot setting first sata

### 進入Linux Install Dependencies
$ sudo apt-get update
$ sudo apt-get install -y build-essential
$ sudo apt-get install -y cmake
$ sudo apt install cmake-curses-gui
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get dist-upgrade

$ sudo add-apt-repository ppa:notepadqq-team/notepadqq
$ sudo apt-get update
$ sudo apt-get install notepadqq
_______________________________________________________________________________________________

/**CUDA**/

### Download from nvidia web
### https://developer.nvidia.com/cuda-downloads
$ sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
$ sudo apt-get update
$ sudo apt-get install cuda

$ sudo vi ~/.bashrc
# export PATH="$PATH:/usr/local/cuda-8.0/bin" 
# export LD_LIBRARY_PATH="/usr/local/cuda-8.0/lib64"

_______________________________________________________________________________________________

/**OpenCV**/

### issue

OpenCV static library was compiled with CUDA 7.5 support.  Please, use the
  same version or rebuild OpenCV with CUDA 8.0
Call Stack (most recent call first):
  CMakeLists.txt:22 (find_package)

Could NOT find CUDA: Found unsuitable version "7.5", but required is exact
  version "8.0" (found /usr)






### Start from Option2)Building the public OpenCV library from source:
### install OpenCV
### https://gist.github.com/arthurbeggs/06df46af94af7f261513934e56103b30
### http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html

### Download opencv-2.4.12-linux
### http://opencv.org/releases.html

$ sudo apt-get install build-essential
$ sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
$ sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev

$ cd ~/opencv
$ mkdir release
$ cd release
$ cmake cmake -G "Unix Makefiles" -DCMAKE_CXX_COMPILER=/usr/bin/g++ CMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_TBB=ON -DBUILD_NEW_PYTHON_SUPPORT=ON -DWITH_V4L=ON -DINSTALL_C_EXAMPLES=ON -DINSTALL_PYTHON_EXAMPLES=ON -DBUILD_EXAMPLES=ON -DWITH_OPENGL=ON -DBUILD_FAT_JAVA_LIB=ON -DINSTALL_TO_MANGLED_PATHS=ON -DINSTALL_CREATE_DISTRIB=ON -DINSTALL_TESTS=ON -DENABLE_FAST_MATH=ON -DWITH_IMAGEIO=ON -DBUILD_SHARED_LIBS=OFF -DWITH_GSTREAMER=ON ..
$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -DWITH_TBB=ON -DINSTALL_C_EXAMPLES=ON -DINSTALL_TESTS=ON -DBUILD_TBB=ON ..
$ ccmake ..
__________________________________________________________________________

   ##if you key in the "ccmake .." you will see as follow:
    #customize cmake (cd build)(ccmake ..) 


    #  BUILD_SHARED_LIBS                ON                                           
    #  BUILD_TBB                        ON  
    #  CUDA_ARCH_BIN                    3.2   (tk1-> 3.2,x86 PC->5)                                         
    #  CUDA_ARCH_PTX       
    #  INSTALL_TESTS                    ON     
    #  WITH_CUDA                        ON 
    #  WITH_TBB                         ON   
    #  WITH_VTK                         OFF          
__________________________________________________________________________

 ##enter twice "c" and one "g" 

$ make all -j4
$ sudo make install

_______________________________________________________________________________________________

/**Caffe**/

$ sudo apt-get install libprotobuf-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler

$ sudo apt-get install --no-install-recommends libboost-all-dev 

$ sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev

$ sudo apt-get install libatlas-base-dev

$ git clone git://github.com/BVLC/caffe.git

$ cd caffe/

$ cp Makefile.config.example Makefile.config

$ cmake ..

#erorr opencv in cmake/Dependencies.cmake
#add
set( OpenCV_DIR /home/user/opencv-2.4.13.2/release )
set(OpenCV_FOUND 1)

$ make all -j4

#erorr /usr/bin/ld: cannot find -lopencv_dep_cudart

$ sudo ln -s /usr/local/cuda-8.0/lib64/libcudart.so /usr/local/lib/
$ sudo ln -s /usr/local/cuda-8.0/lib64/libcudart.a /usr/local/lib/

#add in /caffe/CmakeLists.txt
set(CUDA_USE_STATIC_CUDA_RUNTIME OFF)

$ make install

_______________________________________________________________________________________________

/**TensorRT**/

### Download from nvidia web
### https://developer.nvidia.com/nvidia-tensorrt-download
$ sudo dpkg -i nv-gie-repo-ubuntu1604-cuda8.0-trt2.1-20170614_1-1_amd64.deb
$ sudo apt-get update
$ sudo apt-get install tensorrt-2.1.2

$ dpkg -l | grep TensorRT
### you should see:
### libnvinfer-dev 3.0.2-1+cuda8.0 amd64 TensorRT development libraries and headers
### libnvinfer3 3.0.2-1+cuda8.0 amd64 TensorRT runtime libraries   tensorrt-2.1.2 3.0.2-1+cuda8.0 amd64 Meta package of         TensorRT

### run & test
$ cd /usr/src/tensorrt/samples
$ sudo make
$ cd ../bin/
$ giexec --deploy=mnist.prototxt --model=mnist.caffemodel --output=prob

### issue
tensorrt-2.1.2 : Depends: libnvinfer3 (>= 3.0.2) but it is not going to be installed
Depends: libnvinfer-dev (>= 3.0.2) but it is not going to be installed
E: Unable to correct problems, you have held broken packages.
### solve
update cuda, it solves.
_______________________________________________________________________________________________

/**Eigen**/

$ sudo apt-get install libeigen3-dev

$ cd /usr/include/eigen3

$ sudo cp Eigen/ .. -R

$ sudo cp unsupported/ .. -R

_______________________________________________________________________________________________

/**MySQL**/

$ sudo apt-get install libboost-dev libboost-dbg libboost-doc

# download mysql-connector-c++-1.1.9-linux-ubuntu16.04-x86-64bit

# copy mysql-connector../include to /usr/include

# copy mysql-connector../lib to /usr/lib

$ sudo cp ./mysql_connection.h /usr/include
$ sudo cp ./mysql_driver.h /usr/include
$ sudo cp ./mysql_error.h /usr/include
$ sudo cp ./cppconn /usr/include
$ sudo mkdir /usr/include/cppconn
$ sudo cp ./cppconn/build_config.h /usr/include/cppconn/
$ sudo cp ./cppconn/config.h /usr/include/cppconn/
$ sudo cp ./cppconn/connection.h /usr/include/cppconn/
$ sudo cp ./cppconn/datatype.h /usr/include/cppconn/
$ sudo cp ./cppconn/driver.h /usr/include/cppconn/
$ sudo cp ./cppconn/exception.h /usr/include/cppconn/
$ sudo cp ./cppconn/metadata.h /usr/include/cppconn/
$ sudo cp ./cppconn/parameter_metadata.h /usr/include/cppconn/
$ sudo cp ./cppconn/prepared_statement.h /usr/include/cppconn/
$ sudo cp ./cppconn/resultset.h /usr/include/cppconn/
$ sudo cp ./cppconn/resultset_metadata.h /usr/include/cppconn/
$ sudo cp ./cppconn/sqlstring.h /usr/include/cppconn/
$ sudo cp ./cppconn/statement.h /usr/include/cppconn/
$ sudo cp ./cppconn/variant.h /usr/include/cppconn/
$ sudo cp ./cppconn/version_info.h /usr/include/cppconn/
$ sudo cp ./cppconn/warning.h /usr/include/cppconn/
$ sudo cp ./libmysqlcppconn.so /usr/lib/
$ sudo cp ./libmysqlcppconn.so.7 /usr/lib/
$ sudo cp ./libmysqlcppconn.so.7.1.1.9 /usr/lib/
$ sudo cp ./libmysqlcppconn-static.a /usr/lib/


### remove mysql all

$ sudo apt-get purge --auto-remove mysql-common mysql-server mariadb-server

$ sudo apt-get autoremove

$ sudo apt-get autoclean

$ sudo rm -rf /etc/mysql

$ sudo rm -rf /var/lib/mysql

$ killall -9 mysql (or killall -9 mysqld)

$ userdel mysql

### install mysql-server & mysql-workbench

$ sudo apt-get install mysql-common mysql-server

### remember to SET password for root

$ sudo apt-get install mysql-workbench


_______________________________________________________________________________________________

/**Gender Code**/

		#ifdef _WIN32
			#include "stdafx.h"
			#include <windows.h> 
			#include <io.h>
			#include <direct.h>
			#define not !
			#include <tbb\parallel_for.h>
			#include "rfid\CardReader.h"
		#else
			#include <tbb/parallel_for.h>
			#include "rfid/CardReader.h"
			#include <unistd.h>
			#include <arpa/inet.h>
			#include <sys/types.h>
			#include <sys/stat.h>
			#include <dirent.h>
		#endif	

		$ cd /home/bruce/20170613_libDetection/build/autoBuild.sh
		$ bash ./autoBuild.sh
		or
		$ sudo chmod 755 autoBuild.sh
		$ ./autoBuild.sh
_______________________________________________________________________________________________





